# Activating venv
# python -m venv venv_name
# venv_name\Scripts\activate

# Installing requirements
# pip install -r requirements.txt

# Starting FastApi app
# pip install --upgrade sqlalchemy
# uvicorn src.main:app --reload

python-dotenv==1.0.0
fastapi==0.115.0
uvicorn[standard]==0.30.6
pydantic==2.9.0
SQLAlchemy==2.0.36
email-validator==2.1.1
pydantic-settings==2.2.1



http://localhost:8000/docs






from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def root():
    return {"message": "Hello World"}

@app.get("/hello/{name}")
async def hello(name: str):
    return {"message": f"Hello, {name}!"}



from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base



engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()




from sqlalchemy import Column, Integer, String
from src.database import Base

class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, index=True)
    username = Column(String, unique=True, index=True)
    password = Column(String)







from dotenv import load_dotenv

load_dotenv()


def get_env_or_raise(key: str) -> str:
    """Get an environment variable or raise an exception."""
    value = os.getenv(key)
    if value is None:
        raise ValueError(f"Environment variable {key} is not set")
    return value


DATABASE_URL = get_env_or_raise("DATABASE_URL")

print(DATABASE_URL)



from fastapi import FastAPI
from src.routes import router as router_users

app = FastAPI()

app.include_router(router_users)






from fastapi import APIRouter

router = APIRouter(prefix='/users', tags=['users'])

@router.get("/")
async def root():
    return {"message": "Hello World"}

@router.get("/hello/{name}")
async def hello(name: str):
    return {"message": f"Hello, {name}!"}











@router.post("/", response_model=User)
def create_user(user: UserCreate, db: Session = Depends(get_db())):
    db_user = db.query(User).filter_by(email=user.email).first()

    if db_user:
        raise HTTPException(status_code=400, detail="Email already registered")

    db_user = User(
        email = user.email,
        username = user.username,
        password = user.password
    )

    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user



from fastapi import APIRouter, Depends, HTTPException
from src.database import get_db
from sqlalchemy.orm import Session
from src.schemas import *

---------------------------------------------------
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from src.database import get_db
from src.models import User
from src.schemas import UserCreate, User as UserSchema
from typing import List

router = APIRouter(prefix="/users", tags=["users"])


@router.post("/", response_model=UserSchema)
def create_user(user: UserCreate, db: Session = Depends(get_db)):
    db_user = db.query(User).filter(User.email == user.email).first()
    if db_user:
        raise HTTPException(status_code=400, detail="Email already registered")

    db_user = User(
        email=user.email,
        username=user.username,
        hashed_password=user.password  # In real app, hash the password!
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user
--------------------------------------------
from sqlalchemy import Column, Integer, String
from src.database import Base

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, index=True)
    username = Column(String, unique=True, index=True)
    hashed_password = Column(String)
----------------------------------------
from src.database import Base, engine

# Create database tables
Base.metadata.create_all(bind=engine)
-----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from src.config import DATABASE_URL
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
-----------------------------------------------------
from sqlalchemy import Column, Integer, String
from src.database import Base
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, index=True)
    username = Column(String, unique=True, index=True)
    hashed_password = Column(String)
---------------------------------------------
from pydantic import BaseModel, EmailStr
class UserBase(BaseModel):
    email: EmailStr
    username: str
class UserCreate(UserBase):
    password: str
class User(UserBase):
    id: int
-------------------------------------------------------------
from fastapi import FastAPI
from src.routes import router
from src.database import Base, engine
# Create database tables
Base.metadata.create_all(bind=engine)
app = FastAPI()
app.include_router(router)
-------------------------------------------------------
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from src.database import get_db
from src.models import User
from src.schemas import UserCreate, User as UserSchema
from typing import List
router = APIRouter(prefix="/users", tags=["users"])

@router.post("/", response_model=UserSchema)
def create_user(user: UserCreate, db: Session = Depends(get_db)):
    db_user = db.query(User).filter(User.email == user.email).first()
    if db_user:
        raise HTTPException(status_code=400, detail="Email already registered")
    db_user = User(
        email=user.email,
        username=user.username,
        hashed_password=user.password  # In real app, hash the password!
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user